include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

# workflow rules are not extended by scanner jobs, need to override them manually
# TODO: remove when https://gitlab.com/gitlab-org/gitlab/-/issues/218444 is done
.rules-for-scanners: &rules-for-scanners
  stage: validate
  rules:
    # For merge requests, create a pipeline.
    - if: '$CI_MERGE_REQUEST_IID'
    # For the default branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # For tags, create a pipeline.
    - if: '$CI_COMMIT_TAG'

gemnasium-dependency_scanning:
  <<: *rules-for-scanners

secret_detection:
  stage: validate
  rules:
    # For merge requests, create a pipeline.
    - if: '$CI_MERGE_REQUEST_IID'

semgrep-sast:
  <<: *rules-for-scanners
  before_script:
    - echo ".GOPATH/" > .semgrepignore

# Perform documentation linting and link checking on Markdown files #
# NOTE(prozlach): The reason why we run DinD plus install software on every run
# is that we want to keep the single place where the tooling versions are
# defined and we have diverse range of hosts running `make lint` target (macs,
# linux, brew, apt, snap, etc...). So the idea is to run the linting tools from
# inside docker container both on the laptops of the developers and in the CI.
docslint:
  image: docker:27.2.0
  services:
    - docker:dind
  stage: validate
  needs: []
  script:
    - apk update
    - apk add make
    # Lint content and Markdown, and check links
    - make lint-docs
  rules:
    - if: $CI_MERGE_REQUEST_IID
  tags:
    - gitlab-org-docker

commitlint:
  cache: {}
  image: node:lts-alpine
  stage: validate
  before_script:
    - apk add --no-cache git
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - npx commitlint --from ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --to HEAD --verbose
  rules:
    - if: $CI_MERGE_REQUEST_IID

codelint:
  variables:
    GOLANGCI_LINT_VERSION: 'v1.62.0'
    TESTIFYLINT_VERSION: 'v1.5.2'
  cache: {}
  image: golangci/golangci-lint:$GOLANGCI_LINT_VERSION
  stage: validate
  needs: []
  before_script:
    - apt update
    - apt install jq -y
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

modules:tidy:
  stage: validate
  needs: ['modules:download']
  script:
    - go mod tidy
    - git diff --exit-code go.mod go.sum

modules:download:
  stage: validate
  parallel:
    matrix:
      - GO_VERSION: [ "1.22", "1.23" ]
  script:
    - go mod download
    # This is an external tool used to run tests, we can save some time by downloading in advance
    - go install gotest.tools/gotestsum@$GOTESTSUM_VERSION
  cache:
    key:
      prefix: $GO_VERSION
      files:
        - go.mod
        - go.sum
    paths:
      - .GOPATH/pkg/mod/
    policy: push

mocks:
  needs: ['modules:download']
  stage: validate
  before_script:
    - go install go.uber.org/mock/mockgen@v0.4.0
    - export PATH="$PATH:$GOPATH/bin"
  script:
    - go generate ./...
    - git diff --exit-code **/mocks/*.go

.schema-migrations:
  needs: ['modules:download']
  extends: .go-pg-version-matrix
  # TODO: We're overriding the `.go-pg-version-matrix` build matrix to get rid of the flake described in https://gitlab.com/gitlab-org/container-registry/-/issues/1420
  # by pinning the Postgres 14 version to 14.3. Remove this once we drop support for Postgres 14 in GitLab 18.0 (https://gitlab.com/gitlab-org/container-registry/-/issues/1466).
  parallel:
    matrix:
      - PG_VERSION: "14.3"
        GO_VERSION: [ "1.22", "1.23" ]
      - PG_VERSION: $PG_CURR_VERSION
        GO_VERSION: [ "1.22", "1.23" ]
      - PG_VERSION: $PG_NEXT_VERSION
        GO_VERSION: [ "1.22", "1.23" ]
  variables:
    FF_NETWORK_PER_BUILD: 1
    POSTGRES_PASSWORD: "secret"
    PGPASSWORD: "secret"
    POSTGRES_DB: "registry"
    REGISTRY_DATABASE_ENABLED: "true"
    REGISTRY_DATABASE_HOST: "db"
    REGISTRY_DATABASE_PORT: "5432"
    REGISTRY_DATABASE_USER: "postgres"
    REGISTRY_DATABASE_PASSWORD: "secret"
    REGISTRY_DATABASE_DBNAME: "registry"
    REGISTRY_DATABASE_SSLMODE: "disable"
  services:
    - name: postgres:${PG_VERSION}
      alias: "db"
  before_script:
    - "echo 'version: 0.1' > config.yml"
    - make binaries
    - chmod +x ./bin/*

database:schema-migrations:
  extends: .schema-migrations
  stage: validate
  script:
    - ./bin/registry database migrate up config.yml
    - ./bin/registry database migrate down --force config.yml

database:schema-migrations:status:
  extends: .schema-migrations
  stage: validate
  script:
    - ./bin/registry database migrate status -u config.yml | grep -qw 'false' || exit 1
    - ./bin/registry database migrate up -n 2 config.yml
    - ./bin/registry database migrate status --up-to-date config.yml | grep -qw 'false' || exit 1
    - ./bin/registry database migrate up config.yml
    - ./bin/registry database migrate status -u config.yml | grep -qw 'true' || exit 1

database:structure-sql:
  extends: .schema-migrations
  stage: validate
  # Overrides `parallel` from .schema-migrations so that we only test against the default PG version as different
  # pg_dump versions may produce slightly different outputs, so we settle with the default to match the output produced
  # locally by engineers when executing `make db-structure-dump`.
  parallel:
  variables:
    PG_FORMATTER_VERSION: "5.0"
    PG_VERSION: $PG_CURR_VERSION
  script:
    # Install build/make deps
    - apt-get update && apt-get -y install ca-certificates gnupg lsb-release
    # Install Postgres client
    - wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    - sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    - apt-get update && apt-get -y install postgresql-client-$PG_VERSION
    # Install pgFormatter
    - wget -qO- https://github.com/darold/pgFormatter/archive/refs/tags/v$PG_FORMATTER_VERSION.tar.gz | tar xz
    - cd pgFormatter-$PG_FORMATTER_VERSION
    - perl Makefile.PL && make && make install
    - cd ..
    # Apply database migrations
    - ./bin/registry database migrate up config.yml
    # Dump and validate
    - make db-structure-dump
    - git diff --exit-code
  # Stash the db dump for 24 hrs
  artifacts:
        expire_in: 24h
        when: on_success
        paths:
          - registry/datastore/migrations/structure.sql
