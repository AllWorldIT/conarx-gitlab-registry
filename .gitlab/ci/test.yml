.go-test:
  needs: ['modules:download']
  variables:
    GO_TEST: 'go run gotest.tools/gotestsum@$GOTESTSUM_VERSION --junitfile junit.xml --format testname --packages=$PACKAGE --'
  artifacts:
    reports:
      junit: junit.xml

.go-version-matrix:
  extends: .go-test
  parallel:
    matrix:
      - GO_VERSION: [ "1.22", "1.23" ]

coverage:
  extends: .go-version-matrix
  stage: test
  needs: ['mocks', 'modules:download']
  variables:
    GO_TEST: 'go run gotest.tools/gotestsum@$(GOTESTSUM_VERSION) --junitfile junit.xml --format testname --'
  coverage: '/total:.+\(statements\).+\d+\.\d+/'
  script:
    - make coverage

.oci-conformance-version-matrix:
  parallel:
    matrix:
      - OCI_SPEC_VERSION: [ "v1.0.1", "latest" ]
  rules:
    # See https://gitlab.com/gitlab-org/container-registry/-/issues/1206 for why the latest OCI spec is allowed to fail
    - if: $OCI_SPEC_VERSION == "latest"
      allow_failure: true
    - allow_failure: false
  before_script:
    # Start local registry instance to test against
    - make binaries
    - chmod +x ./bin/*
    - ./bin/registry database migrate up config/database-filesystem.yml
    - ./bin/registry serve config/database-filesystem.yml &>/dev/null &
    # Test against specified versions of OCI Distribution Spec.
    - |
      if [ "$OCI_SPEC_VERSION" == "latest" ]; then 
        VERSION=$(curl --silent "https://api.github.com/repos/opencontainers/distribution-spec/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")'); 
      else 
        VERSION=$OCI_SPEC_VERSION; 
      fi
    - echo "====== Testing against OCI Distribution Spec $VERSION ======"
    - git clone --depth 1 --branch $VERSION https://github.com/opencontainers/distribution-spec.git
    - cd distribution-spec/conformance
    - go test -c
  artifacts:
    paths:
      - distribution-spec/conformance/$OCI_SPEC_VERSION/report.html
    reports:
      junit: distribution-spec/conformance/$OCI_SPEC_VERSION/junit.xml

# See https://github.com/opencontainers/distribution-spec/tree/main/conformance for documentation
oci-conformance:
  extends: .oci-conformance-version-matrix
  stage: test
  needs: ['modules:download']
  variables:
    OCI_ROOT_URL: http://localhost:5000
    OCI_NAMESPACE: oci-conformance/repo-a
    OCI_CROSSMOUNT_NAMESPACE: oci-conformance/repo-b
    # Enable all test workflows
    OCI_TEST_PULL: 1
    OCI_TEST_PUSH: 1
    OCI_TEST_CONTENT_DISCOVERY: 1
    OCI_TEST_CONTENT_MANAGEMENT: 1
    # Enable cross-repository blob mounts
    OCI_AUTOMATIC_CROSSMOUNT: 1
    # Toggle verbose output using a project CI env var for simplicity
    OCI_DEBUG: $OCI_CONFORMANCE_DEBUG
    # For integrity reasons, delete manifests first
    OCI_DELETE_MANIFEST_BEFORE_BLOBS: 1
    # Other
    FF_NETWORK_PER_BUILD: 1
    POSTGRES_DB: "registry_dev"
    POSTGRES_USER: "registry"
    POSTGRES_PASSWORD: "apassword"
    PGPASSWORD: "apassword"
    REGISTRY_DATABASE_HOST: "db"
  services:
    - name: postgres:${PG_CURR_VERSION}-alpine
      alias: "db"
  script:
    - ./conformance.test
