# options for analysis running
run:
  # default concurrency is GOMAXPROCS
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  build-tags:
   - api_conformance_test
   - api_gitlab_test
   - handlers_test
   - include_gcs
   - integration
   - online_gc_test
   - toxiproxy

# output configuration options
output:
  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  depguard:
    rules:
      main:
        list-mode: lax
        deny:
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  govet:
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  gofumpt:
      module-path: github.com/docker/distribution
      extra-rules: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  gosimple:
    checks:
      - all
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - GitLab
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2
  staticcheck:
    checks:
      - "all"
  stylecheck:
    # Disable checks by prefixing with a `-`
    # ST1000: at least one file in a package should have a package comment
    # ST1003: initialism should be capitalized, for example: `var webhookUrl should be webhookURL`
    checks: ["all", "-ST1000", "-ST1003"]
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
  # TODO: Tracked in https://gitlab.com/gitlab-org/container-registry/-/issues/1308
  # - revive
  # - gosec
  # MRs in flight:
  # - unparam
    - gocritic
    - misspell
    - unconvert
    - bodyclose
    - stylecheck
    - gosimple
    - staticcheck
    - depguard
    - dogsled
    - gofumpt
    - goimports
    - ineffassign
    - nakedret
    - typecheck
    - unused
    - whitespace
    - copyloopvar
  # don't enable:
  # - gocognit
  # - goconst
  # - dupl
  # - errcheck
  # - deadcode
  # - gochecknoglobals
  # - gochecknoinits
  # - gocyclo
  # - lll
  # - maligned
  # - prealloc
  # - varcheck

issues:
  exclude-dirs:
    - bin/
    - .GOPATH/
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go|testsuites\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # TODO: replace rand.Read with crypto/rand.Read
    - text: 'rand.Read has been deprecated since Go 1.20'
      linters:
        - staticcheck

#     CertPool.Subjects() has been deprecated but there is no alternative
#	 https://github.com/golang/go/issues/46287
    - text: 'SA1019: pool.Subjects has been deprecated since Go 1.18'
      linters:
        - staticcheck

    # don't report this for test files
    - text: 'SA1029: should not use built-in type string as key for value'
      path: _test\.go|testsuites\.go
    - text: 'SA5011'
      path: _test\.go|testsuites\.go

    # We should keep these definitions and checks around, even if deprecated
    - text: 'v1.MediaTypeImageLayerNonDistributable|v1.MediaTypeImageLayerNonDistributableGzip is deprecated'
      linters:
        - staticcheck

    # Don't report on shadowing `err`. Strictly avoiding shadowing `err` often
    # results in code that is not idomatic for little gain in clarity or correctness.
    - text: 'shadow: declaration of "err" shadows declaration at'
      linters: [ govet ]
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    - path: ^CHANGELOG\.md$
      linters:
        # The changelog captures a set of commits in a release, featuring their commit message, which we shouldn't alter
        - misspell

    - path: "^registry/datastore/migrations/.*\\.go$"
      linters:
        # Migration files shouldn't be updated after being introduced, and we found misspell errors on some of the
        # existing ones, so we have to disable these entirely.
        - misspell
        # Do not check for duplicates on migration files as they are commonly found and expected
        - dupl

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  new: false
