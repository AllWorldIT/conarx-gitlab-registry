CREATE TABLE public.repositories (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    parent_id bigint,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    updated_at timestamp WITH time zone,
    name text NOT NULL,
    path text NOT NULL,
    CONSTRAINT pk_repositories PRIMARY KEY (id),
    CONSTRAINT uq_repositories_path UNIQUE (path),
    CONSTRAINT ck_repositories_name_length CHECK ((char_length(name) <= 255)),
    CONSTRAINT ck_repositories_path_length CHECK ((char_length(path) <= 255))
);

CREATE TABLE public.configurations (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    blob_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    payload bytea NOT NULL,
    CONSTRAINT pk_configurations PRIMARY KEY (id),
    CONSTRAINT uq_configurations_blob_id UNIQUE (blob_id)
);

CREATE TABLE public.manifests (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    configuration_id bigint,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    marked_at timestamp WITH time zone,
    schema_version integer NOT NULL,
    digest_algorithm smallint NOT NULL,
    digest_hex bytea NOT NULL,
    payload bytea NOT NULL,
    media_type text NOT NULL,
    CONSTRAINT pk_manifests PRIMARY KEY (id),
    CONSTRAINT uq_manifests_digest_algorithm_digest_hex UNIQUE (digest_algorithm, digest_hex),
    CONSTRAINT ck_manifests_media_type_length CHECK ((char_length(media_type) <= 255)),
    CONSTRAINT ck_manifests_digest_algorithm_enum CHECK ((digest_algorithm IN (1, 2)))
);

CREATE TABLE public.blobs (
      id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
      size bigint NOT NULL,
      created_at timestamp WITH time zone NOT NULL DEFAULT now(),
      marked_at timestamp WITH time zone,
      digest_algorithm smallint NOT NULL,
      digest_hex bytea NOT NULL,
      media_type text NOT NULL,
      CONSTRAINT pk_blobs PRIMARY KEY (id),
      CONSTRAINT uq_blobs_digest_algorithm_digest_hex UNIQUE (digest_algorithm, digest_hex),
      CONSTRAINT ck_blobs_media_type_length CHECK ((char_length(media_type) <= 255)),
      CONSTRAINT ck_blobs_digest_algorithm_enum CHECK ((digest_algorithm IN (1, 2)))
);

CREATE TABLE public.manifest_layers (
     id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
     manifest_id bigint NOT NULL,
     blob_id bigint NOT NULL,
     created_at timestamp WITH time zone NOT NULL DEFAULT now(),
     CONSTRAINT pk_manifest_layers PRIMARY KEY (id),
     CONSTRAINT uq_manifest_layers_manifest_id_blob_id UNIQUE (manifest_id, blob_id)
);

CREATE TABLE public.manifest_references (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    parent_id bigint NOT NULL,
    child_id bigint NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    CONSTRAINT pk_manifest_references PRIMARY KEY (id),
    CONSTRAINT uq_manifest_references_parent_id_child_id UNIQUE (parent_id, child_id),
    CONSTRAINT ck_manifest_references_parent_id_child_id_differ CHECK (parent_id <> child_id)
);

CREATE TABLE public.tags (
     id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
     repository_id bigint NOT NULL,
     manifest_id bigint NOT NULL,
     created_at timestamp WITH time zone NOT NULL DEFAULT now(),
     updated_at timestamp WITH time zone,
     name text NOT NULL,
     CONSTRAINT pk_tags PRIMARY KEY (id),
     CONSTRAINT uq_tags_name_repository_id UNIQUE (name, repository_id),
     CONSTRAINT ck_tags_name_length CHECK ((char_length(name) <= 255))
);

CREATE TABLE public.repository_manifests (
     id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
     repository_id bigint NOT NULL,
     manifest_id bigint NOT NULL,
     created_at timestamp WITH time zone NOT NULL DEFAULT now(),
     CONSTRAINT pk_repository_manifests PRIMARY KEY (id),
     CONSTRAINT uq_repository_manifests_repository_id_manifest_id UNIQUE (repository_id, manifest_id)
);

CREATE INDEX ix_tags_repository_id ON public.tags USING btree (repository_id);

CREATE INDEX ix_tags_manifest_id ON public.tags USING btree (manifest_id);

CREATE INDEX ix_repositories_parent_id ON public.repositories USING btree (parent_id);

CREATE INDEX ix_manifest_layers_manifest_id ON public.manifest_layers USING btree (manifest_id);

CREATE INDEX ix_manifest_layers_blob_id ON public.manifest_layers USING btree (blob_id);

CREATE INDEX ix_manifest_references_parent_id ON public.manifest_references USING btree (parent_id);

CREATE INDEX ix_manifest_references_child_id ON public.manifest_references USING btree (child_id);

CREATE INDEX ix_repository_manifests_repository_id ON public.repository_manifests USING btree (repository_id);

CREATE INDEX ix_repository_manifests_manifest_id ON public.repository_manifests USING btree (manifest_id);

CREATE TABLE public.repository_blobs (
      id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
      repository_id bigint NOT NULL,
      blob_id bigint NOT NULL,
      created_at timestamp WITH time zone NOT NULL DEFAULT now(),
      CONSTRAINT pk_repository_blobs PRIMARY KEY (id),
      CONSTRAINT uq_repository_blobs_repository_id_blob_id UNIQUE (repository_id, blob_id)
);

CREATE INDEX ix_repository_blobs_repository_id ON public.repository_blobs USING btree (repository_id);

CREATE INDEX ix_repository_blobs_blob_id ON public.repository_blobs USING btree (blob_id);

CREATE INDEX ix_configurations_blob_id ON public.configurations USING btree (blob_id);

CREATE INDEX ix_manifests_configuration_id ON public.manifests USING btree (configuration_id);

ALTER TABLE public.repositories
    ADD CONSTRAINT fk_repositories_parent_id_repositories FOREIGN KEY (parent_id) REFERENCES public.repositories (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.configurations
    ADD CONSTRAINT fk_configurations_blob_id_blobs FOREIGN KEY (blob_id) REFERENCES public.blobs (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.manifests
    ADD CONSTRAINT fk_manifests_configuration_id_configurations FOREIGN KEY (configuration_id) REFERENCES public.configurations (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.manifest_layers
    ADD CONSTRAINT fk_manifest_layers_manifest_id_manifests FOREIGN KEY (manifest_id) REFERENCES public.manifests (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.manifest_layers
    ADD CONSTRAINT fk_manifest_layers_blob_id_blobs FOREIGN KEY (blob_id) REFERENCES public.blobs (id) MATCH FULL ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.manifest_references
    ADD CONSTRAINT fk_manifest_references_parent_id_manifests FOREIGN KEY (parent_id) REFERENCES public.manifests (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.manifest_references
    ADD CONSTRAINT fk_manifest_references_child_id_manifests FOREIGN KEY (child_id) REFERENCES public.manifests (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.tags
    ADD CONSTRAINT fk_tags_repository_id_repositories FOREIGN KEY (repository_id) REFERENCES public.repositories (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.tags
    ADD CONSTRAINT fk_tags_manifest_id_manifests FOREIGN KEY (manifest_id) REFERENCES public.manifests (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.repository_manifests
    ADD CONSTRAINT fk_repository_manifests_repository_id_repositories FOREIGN KEY (repository_id) REFERENCES public.repositories (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.repository_manifests
    ADD CONSTRAINT fk_repository_manifests_manifest_id_manifests FOREIGN KEY (manifest_id) REFERENCES public.manifests (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.repository_blobs
    ADD CONSTRAINT fk_repository_blobs_repository_id_repositories FOREIGN KEY (repository_id) REFERENCES public.repositories (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE public.repository_blobs
    ADD CONSTRAINT fk_repository_blobs_blob_id_blobs FOREIGN KEY (blob_id) REFERENCES public.blobs (id) MATCH FULL ON DELETE CASCADE ON UPDATE NO ACTION;
