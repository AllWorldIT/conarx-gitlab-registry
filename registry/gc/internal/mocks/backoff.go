// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/gc/internal (interfaces: Backoff)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/backoff.go . Backoff
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockBackoff is a mock of Backoff interface.
type MockBackoff struct {
	ctrl     *gomock.Controller
	recorder *MockBackoffMockRecorder
}

// MockBackoffMockRecorder is the mock recorder for MockBackoff.
type MockBackoffMockRecorder struct {
	mock *MockBackoff
}

// NewMockBackoff creates a new mock instance.
func NewMockBackoff(ctrl *gomock.Controller) *MockBackoff {
	mock := &MockBackoff{ctrl: ctrl}
	mock.recorder = &MockBackoffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackoff) EXPECT() *MockBackoffMockRecorder {
	return m.recorder
}

// NextBackOff mocks base method.
func (m *MockBackoff) NextBackOff() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextBackOff")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// NextBackOff indicates an expected call of NextBackOff.
func (mr *MockBackoffMockRecorder) NextBackOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextBackOff", reflect.TypeOf((*MockBackoff)(nil).NextBackOff))
}

// Reset mocks base method.
func (m *MockBackoff) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBackoffMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBackoff)(nil).Reset))
}
