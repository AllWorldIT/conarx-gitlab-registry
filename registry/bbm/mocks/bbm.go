// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/bbm (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/bbm.go . Handler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	datastore "github.com/docker/distribution/registry/datastore"
	models "github.com/docker/distribution/registry/datastore/models"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ExecuteJob mocks base method.
func (m *MockHandler) ExecuteJob(arg0 context.Context, arg1 datastore.BackgroundMigrationStore, arg2 *models.BackgroundMigrationJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteJob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteJob indicates an expected call of ExecuteJob.
func (mr *MockHandlerMockRecorder) ExecuteJob(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteJob", reflect.TypeOf((*MockHandler)(nil).ExecuteJob), arg0, arg1, arg2)
}

// FindJob mocks base method.
func (m *MockHandler) FindJob(arg0 context.Context, arg1 datastore.BackgroundMigrationStore) (*models.BackgroundMigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJob", arg0, arg1)
	ret0, _ := ret[0].(*models.BackgroundMigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJob indicates an expected call of FindJob.
func (mr *MockHandlerMockRecorder) FindJob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJob", reflect.TypeOf((*MockHandler)(nil).FindJob), arg0, arg1)
}

// GrabLock mocks base method.
func (m *MockHandler) GrabLock(arg0 context.Context, arg1 datastore.BackgroundMigrationStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrabLock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrabLock indicates an expected call of GrabLock.
func (mr *MockHandlerMockRecorder) GrabLock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrabLock", reflect.TypeOf((*MockHandler)(nil).GrabLock), arg0, arg1)
}
