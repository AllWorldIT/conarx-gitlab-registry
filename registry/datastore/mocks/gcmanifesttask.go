// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/datastore (interfaces: GCManifestTaskStore)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/gcmanifesttask.go . GCManifestTaskStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/docker/distribution/registry/datastore/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGCManifestTaskStore is a mock of GCManifestTaskStore interface.
type MockGCManifestTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockGCManifestTaskStoreMockRecorder
	isgomock struct{}
}

// MockGCManifestTaskStoreMockRecorder is the mock recorder for MockGCManifestTaskStore.
type MockGCManifestTaskStoreMockRecorder struct {
	mock *MockGCManifestTaskStore
}

// NewMockGCManifestTaskStore creates a new mock instance.
func NewMockGCManifestTaskStore(ctrl *gomock.Controller) *MockGCManifestTaskStore {
	mock := &MockGCManifestTaskStore{ctrl: ctrl}
	mock.recorder = &MockGCManifestTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCManifestTaskStore) EXPECT() *MockGCManifestTaskStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockGCManifestTaskStore) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockGCManifestTaskStoreMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGCManifestTaskStore)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockGCManifestTaskStore) Delete(ctx context.Context, b *models.GCManifestTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGCManifestTaskStoreMockRecorder) Delete(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGCManifestTaskStore)(nil).Delete), ctx, b)
}

// FindAll mocks base method.
func (m *MockGCManifestTaskStore) FindAll(ctx context.Context) ([]*models.GCManifestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*models.GCManifestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGCManifestTaskStoreMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGCManifestTaskStore)(nil).FindAll), ctx)
}

// FindAndLock mocks base method.
func (m *MockGCManifestTaskStore) FindAndLock(ctx context.Context, namespaceID, repositoryID, manifestID int64) (*models.GCManifestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndLock", ctx, namespaceID, repositoryID, manifestID)
	ret0, _ := ret[0].(*models.GCManifestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndLock indicates an expected call of FindAndLock.
func (mr *MockGCManifestTaskStoreMockRecorder) FindAndLock(ctx, namespaceID, repositoryID, manifestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndLock", reflect.TypeOf((*MockGCManifestTaskStore)(nil).FindAndLock), ctx, namespaceID, repositoryID, manifestID)
}

// FindAndLockBefore mocks base method.
func (m *MockGCManifestTaskStore) FindAndLockBefore(ctx context.Context, namespaceID, repositoryID, manifestID int64, date time.Time) (*models.GCManifestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndLockBefore", ctx, namespaceID, repositoryID, manifestID, date)
	ret0, _ := ret[0].(*models.GCManifestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndLockBefore indicates an expected call of FindAndLockBefore.
func (mr *MockGCManifestTaskStoreMockRecorder) FindAndLockBefore(ctx, namespaceID, repositoryID, manifestID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndLockBefore", reflect.TypeOf((*MockGCManifestTaskStore)(nil).FindAndLockBefore), ctx, namespaceID, repositoryID, manifestID, date)
}

// FindAndLockNBefore mocks base method.
func (m *MockGCManifestTaskStore) FindAndLockNBefore(ctx context.Context, namespaceID, repositoryID int64, manifestIDs []int64, date time.Time) ([]*models.GCManifestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndLockNBefore", ctx, namespaceID, repositoryID, manifestIDs, date)
	ret0, _ := ret[0].([]*models.GCManifestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndLockNBefore indicates an expected call of FindAndLockNBefore.
func (mr *MockGCManifestTaskStoreMockRecorder) FindAndLockNBefore(ctx, namespaceID, repositoryID, manifestIDs, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndLockNBefore", reflect.TypeOf((*MockGCManifestTaskStore)(nil).FindAndLockNBefore), ctx, namespaceID, repositoryID, manifestIDs, date)
}

// IsDangling mocks base method.
func (m *MockGCManifestTaskStore) IsDangling(ctx context.Context, b *models.GCManifestTask) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDangling", ctx, b)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDangling indicates an expected call of IsDangling.
func (mr *MockGCManifestTaskStoreMockRecorder) IsDangling(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDangling", reflect.TypeOf((*MockGCManifestTaskStore)(nil).IsDangling), ctx, b)
}

// Next mocks base method.
func (m *MockGCManifestTaskStore) Next(ctx context.Context) (*models.GCManifestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(*models.GCManifestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockGCManifestTaskStoreMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGCManifestTaskStore)(nil).Next), ctx)
}

// Postpone mocks base method.
func (m *MockGCManifestTaskStore) Postpone(ctx context.Context, b *models.GCManifestTask, d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postpone", ctx, b, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Postpone indicates an expected call of Postpone.
func (mr *MockGCManifestTaskStoreMockRecorder) Postpone(ctx, b, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postpone", reflect.TypeOf((*MockGCManifestTaskStore)(nil).Postpone), ctx, b, d)
}
