// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/datastore (interfaces: RepositoryCache)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/repository.go . RepositoryCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/docker/distribution/registry/datastore/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryCache is a mock of RepositoryCache interface.
type MockRepositoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryCacheMockRecorder
	isgomock struct{}
}

// MockRepositoryCacheMockRecorder is the mock recorder for MockRepositoryCache.
type MockRepositoryCacheMockRecorder struct {
	mock *MockRepositoryCache
}

// NewMockRepositoryCache creates a new mock instance.
func NewMockRepositoryCache(ctrl *gomock.Controller) *MockRepositoryCache {
	mock := &MockRepositoryCache{ctrl: ctrl}
	mock.recorder = &MockRepositoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryCache) EXPECT() *MockRepositoryCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepositoryCache) Get(ctx context.Context, path string) *models.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path)
	ret0, _ := ret[0].(*models.Repository)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryCacheMockRecorder) Get(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryCache)(nil).Get), ctx, path)
}

// GetLSN mocks base method.
func (m *MockRepositoryCache) GetLSN(ctx context.Context, r *models.Repository) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLSN", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLSN indicates an expected call of GetLSN.
func (mr *MockRepositoryCacheMockRecorder) GetLSN(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLSN", reflect.TypeOf((*MockRepositoryCache)(nil).GetLSN), ctx, r)
}

// GetSizeWithDescendants mocks base method.
func (m *MockRepositoryCache) GetSizeWithDescendants(ctx context.Context, r *models.Repository) (bool, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeWithDescendants", ctx, r)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// GetSizeWithDescendants indicates an expected call of GetSizeWithDescendants.
func (mr *MockRepositoryCacheMockRecorder) GetSizeWithDescendants(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeWithDescendants", reflect.TypeOf((*MockRepositoryCache)(nil).GetSizeWithDescendants), ctx, r)
}

// HasSizeWithDescendantsTimedOut mocks base method.
func (m *MockRepositoryCache) HasSizeWithDescendantsTimedOut(ctx context.Context, r *models.Repository) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSizeWithDescendantsTimedOut", ctx, r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSizeWithDescendantsTimedOut indicates an expected call of HasSizeWithDescendantsTimedOut.
func (mr *MockRepositoryCacheMockRecorder) HasSizeWithDescendantsTimedOut(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSizeWithDescendantsTimedOut", reflect.TypeOf((*MockRepositoryCache)(nil).HasSizeWithDescendantsTimedOut), ctx, r)
}

// InvalidateSize mocks base method.
func (m *MockRepositoryCache) InvalidateSize(ctx context.Context, repo *models.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateSize", ctx, repo)
}

// InvalidateSize indicates an expected call of InvalidateSize.
func (mr *MockRepositoryCacheMockRecorder) InvalidateSize(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSize", reflect.TypeOf((*MockRepositoryCache)(nil).InvalidateSize), ctx, repo)
}

// Set mocks base method.
func (m *MockRepositoryCache) Set(ctx context.Context, repo *models.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, repo)
}

// Set indicates an expected call of Set.
func (mr *MockRepositoryCacheMockRecorder) Set(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepositoryCache)(nil).Set), ctx, repo)
}

// SetLSN mocks base method.
func (m *MockRepositoryCache) SetLSN(ctx context.Context, r *models.Repository, lsn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLSN", ctx, r, lsn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLSN indicates an expected call of SetLSN.
func (mr *MockRepositoryCacheMockRecorder) SetLSN(ctx, r, lsn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLSN", reflect.TypeOf((*MockRepositoryCache)(nil).SetLSN), ctx, r, lsn)
}

// SetSizeWithDescendants mocks base method.
func (m *MockRepositoryCache) SetSizeWithDescendants(ctx context.Context, r *models.Repository, size int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSizeWithDescendants", ctx, r, size)
}

// SetSizeWithDescendants indicates an expected call of SetSizeWithDescendants.
func (mr *MockRepositoryCacheMockRecorder) SetSizeWithDescendants(ctx, r, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSizeWithDescendants", reflect.TypeOf((*MockRepositoryCache)(nil).SetSizeWithDescendants), ctx, r, size)
}

// SizeWithDescendantsTimedOut mocks base method.
func (m *MockRepositoryCache) SizeWithDescendantsTimedOut(ctx context.Context, r *models.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SizeWithDescendantsTimedOut", ctx, r)
}

// SizeWithDescendantsTimedOut indicates an expected call of SizeWithDescendantsTimedOut.
func (mr *MockRepositoryCacheMockRecorder) SizeWithDescendantsTimedOut(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SizeWithDescendantsTimedOut", reflect.TypeOf((*MockRepositoryCache)(nil).SizeWithDescendantsTimedOut), ctx, r)
}
