// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/datastore (interfaces: ManifestStore)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manifest.go . ManifestStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/docker/distribution/registry/datastore/models"
	digest "github.com/opencontainers/go-digest"
	gomock "go.uber.org/mock/gomock"
)

// MockManifestStore is a mock of ManifestStore interface.
type MockManifestStore struct {
	ctrl     *gomock.Controller
	recorder *MockManifestStoreMockRecorder
	isgomock struct{}
}

// MockManifestStoreMockRecorder is the mock recorder for MockManifestStore.
type MockManifestStoreMockRecorder struct {
	mock *MockManifestStore
}

// NewMockManifestStore creates a new mock instance.
func NewMockManifestStore(ctrl *gomock.Controller) *MockManifestStore {
	mock := &MockManifestStore{ctrl: ctrl}
	mock.recorder = &MockManifestStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestStore) EXPECT() *MockManifestStoreMockRecorder {
	return m.recorder
}

// AssociateLayerBlob mocks base method.
func (m_2 *MockManifestStore) AssociateLayerBlob(ctx context.Context, m *models.Manifest, b *models.Blob) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AssociateLayerBlob", ctx, m, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateLayerBlob indicates an expected call of AssociateLayerBlob.
func (mr *MockManifestStoreMockRecorder) AssociateLayerBlob(ctx, m, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLayerBlob", reflect.TypeOf((*MockManifestStore)(nil).AssociateLayerBlob), ctx, m, b)
}

// AssociateManifest mocks base method.
func (m_2 *MockManifestStore) AssociateManifest(ctx context.Context, ml, m *models.Manifest) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AssociateManifest", ctx, ml, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateManifest indicates an expected call of AssociateManifest.
func (mr *MockManifestStoreMockRecorder) AssociateManifest(ctx, ml, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateManifest", reflect.TypeOf((*MockManifestStore)(nil).AssociateManifest), ctx, ml, m)
}

// Count mocks base method.
func (m *MockManifestStore) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockManifestStoreMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockManifestStore)(nil).Count), ctx)
}

// Create mocks base method.
func (m_2 *MockManifestStore) Create(ctx context.Context, m *models.Manifest) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockManifestStoreMockRecorder) Create(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockManifestStore)(nil).Create), ctx, m)
}

// CreateOrFind mocks base method.
func (m_2 *MockManifestStore) CreateOrFind(ctx context.Context, m *models.Manifest) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateOrFind", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrFind indicates an expected call of CreateOrFind.
func (mr *MockManifestStoreMockRecorder) CreateOrFind(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrFind", reflect.TypeOf((*MockManifestStore)(nil).CreateOrFind), ctx, m)
}

// Delete mocks base method.
func (m *MockManifestStore) Delete(ctx context.Context, namespaceID, repositoryID, id int64) (*digest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, namespaceID, repositoryID, id)
	ret0, _ := ret[0].(*digest.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockManifestStoreMockRecorder) Delete(ctx, namespaceID, repositoryID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockManifestStore)(nil).Delete), ctx, namespaceID, repositoryID, id)
}

// DissociateLayerBlob mocks base method.
func (m_2 *MockManifestStore) DissociateLayerBlob(ctx context.Context, m *models.Manifest, b *models.Blob) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "DissociateLayerBlob", ctx, m, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// DissociateLayerBlob indicates an expected call of DissociateLayerBlob.
func (mr *MockManifestStoreMockRecorder) DissociateLayerBlob(ctx, m, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateLayerBlob", reflect.TypeOf((*MockManifestStore)(nil).DissociateLayerBlob), ctx, m, b)
}

// DissociateManifest mocks base method.
func (m_2 *MockManifestStore) DissociateManifest(ctx context.Context, ml, m *models.Manifest) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "DissociateManifest", ctx, ml, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// DissociateManifest indicates an expected call of DissociateManifest.
func (mr *MockManifestStoreMockRecorder) DissociateManifest(ctx, ml, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateManifest", reflect.TypeOf((*MockManifestStore)(nil).DissociateManifest), ctx, ml, m)
}

// FindAll mocks base method.
func (m *MockManifestStore) FindAll(ctx context.Context) (models.Manifests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].(models.Manifests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockManifestStoreMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockManifestStore)(nil).FindAll), ctx)
}

// LayerBlobs mocks base method.
func (m_2 *MockManifestStore) LayerBlobs(ctx context.Context, m *models.Manifest) (models.Blobs, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "LayerBlobs", ctx, m)
	ret0, _ := ret[0].(models.Blobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerBlobs indicates an expected call of LayerBlobs.
func (mr *MockManifestStoreMockRecorder) LayerBlobs(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerBlobs", reflect.TypeOf((*MockManifestStore)(nil).LayerBlobs), ctx, m)
}

// References mocks base method.
func (m_2 *MockManifestStore) References(ctx context.Context, m *models.Manifest) (models.Manifests, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "References", ctx, m)
	ret0, _ := ret[0].(models.Manifests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// References indicates an expected call of References.
func (mr *MockManifestStoreMockRecorder) References(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "References", reflect.TypeOf((*MockManifestStore)(nil).References), ctx, m)
}
