// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/datastore (interfaces: LoadBalancer,DNSResolver)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/loadbalancing.go . LoadBalancer,DNSResolver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"

	datastore "github.com/docker/distribution/registry/datastore"
	models "github.com/docker/distribution/registry/datastore/models"
	gomock "go.uber.org/mock/gomock"
)

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
	isgomock struct{}
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLoadBalancer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLoadBalancerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLoadBalancer)(nil).Close))
}

// GetReplicaLagInfo mocks base method.
func (m *MockLoadBalancer) GetReplicaLagInfo(addr string) *datastore.ReplicaLagInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaLagInfo", addr)
	ret0, _ := ret[0].(*datastore.ReplicaLagInfo)
	return ret0
}

// GetReplicaLagInfo indicates an expected call of GetReplicaLagInfo.
func (mr *MockLoadBalancerMockRecorder) GetReplicaLagInfo(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaLagInfo", reflect.TypeOf((*MockLoadBalancer)(nil).GetReplicaLagInfo), addr)
}

// Primary mocks base method.
func (m *MockLoadBalancer) Primary() *datastore.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Primary")
	ret0, _ := ret[0].(*datastore.DB)
	return ret0
}

// Primary indicates an expected call of Primary.
func (mr *MockLoadBalancerMockRecorder) Primary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Primary", reflect.TypeOf((*MockLoadBalancer)(nil).Primary))
}

// RecordLSN mocks base method.
func (m *MockLoadBalancer) RecordLSN(arg0 context.Context, arg1 *models.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLSN", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordLSN indicates an expected call of RecordLSN.
func (mr *MockLoadBalancerMockRecorder) RecordLSN(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLSN", reflect.TypeOf((*MockLoadBalancer)(nil).RecordLSN), arg0, arg1)
}

// Replica mocks base method.
func (m *MockLoadBalancer) Replica(arg0 context.Context) *datastore.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replica", arg0)
	ret0, _ := ret[0].(*datastore.DB)
	return ret0
}

// Replica indicates an expected call of Replica.
func (mr *MockLoadBalancerMockRecorder) Replica(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replica", reflect.TypeOf((*MockLoadBalancer)(nil).Replica), arg0)
}

// Replicas mocks base method.
func (m *MockLoadBalancer) Replicas() []*datastore.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].([]*datastore.DB)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockLoadBalancerMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockLoadBalancer)(nil).Replicas))
}

// StartLagCheck mocks base method.
func (m *MockLoadBalancer) StartLagCheck(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLagCheck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLagCheck indicates an expected call of StartLagCheck.
func (mr *MockLoadBalancerMockRecorder) StartLagCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLagCheck", reflect.TypeOf((*MockLoadBalancer)(nil).StartLagCheck), arg0)
}

// StartPoolRefresh mocks base method.
func (m *MockLoadBalancer) StartPoolRefresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPoolRefresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPoolRefresh indicates an expected call of StartPoolRefresh.
func (mr *MockLoadBalancerMockRecorder) StartPoolRefresh(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPoolRefresh", reflect.TypeOf((*MockLoadBalancer)(nil).StartPoolRefresh), arg0)
}

// TypeOf mocks base method.
func (m *MockLoadBalancer) TypeOf(arg0 *datastore.DB) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TypeOf", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TypeOf indicates an expected call of TypeOf.
func (mr *MockLoadBalancerMockRecorder) TypeOf(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TypeOf", reflect.TypeOf((*MockLoadBalancer)(nil).TypeOf), arg0)
}

// UpToDateReplica mocks base method.
func (m *MockLoadBalancer) UpToDateReplica(arg0 context.Context, arg1 *models.Repository) *datastore.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpToDateReplica", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DB)
	return ret0
}

// UpToDateReplica indicates an expected call of UpToDateReplica.
func (mr *MockLoadBalancerMockRecorder) UpToDateReplica(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpToDateReplica", reflect.TypeOf((*MockLoadBalancer)(nil).UpToDateReplica), arg0, arg1)
}

// MockDNSResolver is a mock of DNSResolver interface.
type MockDNSResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResolverMockRecorder
	isgomock struct{}
}

// MockDNSResolverMockRecorder is the mock recorder for MockDNSResolver.
type MockDNSResolverMockRecorder struct {
	mock *MockDNSResolver
}

// NewMockDNSResolver creates a new mock instance.
func NewMockDNSResolver(ctrl *gomock.Controller) *MockDNSResolver {
	mock := &MockDNSResolver{ctrl: ctrl}
	mock.recorder = &MockDNSResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResolver) EXPECT() *MockDNSResolverMockRecorder {
	return m.recorder
}

// LookupHost mocks base method.
func (m *MockDNSResolver) LookupHost(ctx context.Context, host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHost", ctx, host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockDNSResolverMockRecorder) LookupHost(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockDNSResolver)(nil).LookupHost), ctx, host)
}

// LookupSRV mocks base method.
func (m *MockDNSResolver) LookupSRV(ctx context.Context) ([]*net.SRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", ctx)
	ret0, _ := ret[0].([]*net.SRV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupSRV indicates an expected call of LookupSRV.
func (mr *MockDNSResolverMockRecorder) LookupSRV(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockDNSResolver)(nil).LookupSRV), ctx)
}
