// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/datastore (interfaces: BackgroundMigrationStore)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/backgroundmigration.go . BackgroundMigrationStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/docker/distribution/registry/datastore/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBackgroundMigrationStore is a mock of BackgroundMigrationStore interface.
type MockBackgroundMigrationStore struct {
	ctrl     *gomock.Controller
	recorder *MockBackgroundMigrationStoreMockRecorder
	isgomock struct{}
}

// MockBackgroundMigrationStoreMockRecorder is the mock recorder for MockBackgroundMigrationStore.
type MockBackgroundMigrationStoreMockRecorder struct {
	mock *MockBackgroundMigrationStore
}

// NewMockBackgroundMigrationStore creates a new mock instance.
func NewMockBackgroundMigrationStore(ctrl *gomock.Controller) *MockBackgroundMigrationStore {
	mock := &MockBackgroundMigrationStore{ctrl: ctrl}
	mock.recorder = &MockBackgroundMigrationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackgroundMigrationStore) EXPECT() *MockBackgroundMigrationStoreMockRecorder {
	return m.recorder
}

// AreFinished mocks base method.
func (m *MockBackgroundMigrationStore) AreFinished(ctx context.Context, names []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreFinished", ctx, names)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AreFinished indicates an expected call of AreFinished.
func (mr *MockBackgroundMigrationStoreMockRecorder) AreFinished(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreFinished", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).AreFinished), ctx, names)
}

// CountByStatus mocks base method.
func (m *MockBackgroundMigrationStore) CountByStatus(ctx context.Context) (map[models.BackgroundMigrationStatus]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByStatus", ctx)
	ret0, _ := ret[0].(map[models.BackgroundMigrationStatus]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByStatus indicates an expected call of CountByStatus.
func (mr *MockBackgroundMigrationStoreMockRecorder) CountByStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByStatus", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).CountByStatus), ctx)
}

// CreateNewJob mocks base method.
func (m *MockBackgroundMigrationStore) CreateNewJob(ctx context.Context, newJob *models.BackgroundMigrationJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewJob", ctx, newJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewJob indicates an expected call of CreateNewJob.
func (mr *MockBackgroundMigrationStoreMockRecorder) CreateNewJob(ctx, newJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewJob", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).CreateNewJob), ctx, newJob)
}

// ExistsColumn mocks base method.
func (m *MockBackgroundMigrationStore) ExistsColumn(ctx context.Context, schema, table, column string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsColumn", ctx, schema, table, column)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsColumn indicates an expected call of ExistsColumn.
func (mr *MockBackgroundMigrationStoreMockRecorder) ExistsColumn(ctx, schema, table, column any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsColumn", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).ExistsColumn), ctx, schema, table, column)
}

// ExistsTable mocks base method.
func (m *MockBackgroundMigrationStore) ExistsTable(ctx context.Context, schema, table string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsTable", ctx, schema, table)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsTable indicates an expected call of ExistsTable.
func (mr *MockBackgroundMigrationStoreMockRecorder) ExistsTable(ctx, schema, table any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsTable", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).ExistsTable), ctx, schema, table)
}

// FindAll mocks base method.
func (m *MockBackgroundMigrationStore) FindAll(ctx context.Context) (models.BackgroundMigrations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].(models.BackgroundMigrations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockBackgroundMigrationStore) FindById(ctx context.Context, id int) (*models.BackgroundMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*models.BackgroundMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindById), ctx, id)
}

// FindByName mocks base method.
func (m *MockBackgroundMigrationStore) FindByName(ctx context.Context, name string) (*models.BackgroundMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*models.BackgroundMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindByName), ctx, name)
}

// FindJobEndFromJobStart mocks base method.
func (m *MockBackgroundMigrationStore) FindJobEndFromJobStart(ctx context.Context, table, column string, start, last, batchSize int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJobEndFromJobStart", ctx, table, column, start, last, batchSize)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJobEndFromJobStart indicates an expected call of FindJobEndFromJobStart.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindJobEndFromJobStart(ctx, table, column, start, last, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobEndFromJobStart", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindJobEndFromJobStart), ctx, table, column, start, last, batchSize)
}

// FindJobWithEndID mocks base method.
func (m *MockBackgroundMigrationStore) FindJobWithEndID(ctx context.Context, bmID, endID int) (*models.BackgroundMigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJobWithEndID", ctx, bmID, endID)
	ret0, _ := ret[0].(*models.BackgroundMigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJobWithEndID indicates an expected call of FindJobWithEndID.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindJobWithEndID(ctx, bmID, endID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobWithEndID", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindJobWithEndID), ctx, bmID, endID)
}

// FindJobWithStatus mocks base method.
func (m *MockBackgroundMigrationStore) FindJobWithStatus(ctx context.Context, bmID int, status models.BackgroundMigrationStatus) (*models.BackgroundMigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJobWithStatus", ctx, bmID, status)
	ret0, _ := ret[0].(*models.BackgroundMigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJobWithStatus indicates an expected call of FindJobWithStatus.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindJobWithStatus(ctx, bmID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobWithStatus", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindJobWithStatus), ctx, bmID, status)
}

// FindLastJob mocks base method.
func (m *MockBackgroundMigrationStore) FindLastJob(ctx context.Context, backgroundMigration *models.BackgroundMigration) (*models.BackgroundMigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastJob", ctx, backgroundMigration)
	ret0, _ := ret[0].(*models.BackgroundMigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastJob indicates an expected call of FindLastJob.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindLastJob(ctx, backgroundMigration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastJob", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindLastJob), ctx, backgroundMigration)
}

// FindNext mocks base method.
func (m *MockBackgroundMigrationStore) FindNext(ctx context.Context) (*models.BackgroundMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNext", ctx)
	ret0, _ := ret[0].(*models.BackgroundMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNext indicates an expected call of FindNext.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindNext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNext", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindNext), ctx)
}

// FindNextByStatus mocks base method.
func (m *MockBackgroundMigrationStore) FindNextByStatus(ctx context.Context, status models.BackgroundMigrationStatus) (*models.BackgroundMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNextByStatus", ctx, status)
	ret0, _ := ret[0].(*models.BackgroundMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNextByStatus indicates an expected call of FindNextByStatus.
func (mr *MockBackgroundMigrationStoreMockRecorder) FindNextByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNextByStatus", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).FindNextByStatus), ctx, status)
}

// GetPendingWALCount mocks base method.
func (m *MockBackgroundMigrationStore) GetPendingWALCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingWALCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingWALCount indicates an expected call of GetPendingWALCount.
func (mr *MockBackgroundMigrationStoreMockRecorder) GetPendingWALCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingWALCount", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).GetPendingWALCount), ctx)
}

// IncrementJobAttempts mocks base method.
func (m *MockBackgroundMigrationStore) IncrementJobAttempts(ctx context.Context, jobID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementJobAttempts", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementJobAttempts indicates an expected call of IncrementJobAttempts.
func (mr *MockBackgroundMigrationStoreMockRecorder) IncrementJobAttempts(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementJobAttempts", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).IncrementJobAttempts), ctx, jobID)
}

// Lock mocks base method.
func (m *MockBackgroundMigrationStore) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockBackgroundMigrationStoreMockRecorder) Lock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).Lock), ctx)
}

// Pause mocks base method.
func (m *MockBackgroundMigrationStore) Pause(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockBackgroundMigrationStoreMockRecorder) Pause(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).Pause), ctx)
}

// Resume mocks base method.
func (m *MockBackgroundMigrationStore) Resume(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockBackgroundMigrationStoreMockRecorder) Resume(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).Resume), ctx)
}

// SyncLock mocks base method.
func (m *MockBackgroundMigrationStore) SyncLock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncLock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncLock indicates an expected call of SyncLock.
func (mr *MockBackgroundMigrationStoreMockRecorder) SyncLock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLock", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).SyncLock), ctx)
}

// UpdateJobStatus mocks base method.
func (m *MockBackgroundMigrationStore) UpdateJobStatus(ctx context.Context, job *models.BackgroundMigrationJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockBackgroundMigrationStoreMockRecorder) UpdateJobStatus(ctx, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).UpdateJobStatus), ctx, job)
}

// UpdateStatus mocks base method.
func (m *MockBackgroundMigrationStore) UpdateStatus(ctx context.Context, bbm *models.BackgroundMigration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, bbm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockBackgroundMigrationStoreMockRecorder) UpdateStatus(ctx, bbm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).UpdateStatus), ctx, bbm)
}

// ValidateMigrationTableAndColumn mocks base method.
func (m *MockBackgroundMigrationStore) ValidateMigrationTableAndColumn(ctx context.Context, tableWithSchema, column string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMigrationTableAndColumn", ctx, tableWithSchema, column)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateMigrationTableAndColumn indicates an expected call of ValidateMigrationTableAndColumn.
func (mr *MockBackgroundMigrationStoreMockRecorder) ValidateMigrationTableAndColumn(ctx, tableWithSchema, column any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMigrationTableAndColumn", reflect.TypeOf((*MockBackgroundMigrationStore)(nil).ValidateMigrationTableAndColumn), ctx, tableWithSchema, column)
}
