// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/distribution/registry/internal (interfaces: Clock)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/clock.go . Clock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	clock "github.com/benbjohnson/clock"
	gomock "go.uber.org/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
	isgomock struct{}
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockClock) After(d time.Duration) <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", d)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// After indicates an expected call of After.
func (mr *MockClockMockRecorder) After(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockClock)(nil).After), d)
}

// AfterFunc mocks base method.
func (m *MockClock) AfterFunc(d time.Duration, f func()) *clock.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterFunc", d, f)
	ret0, _ := ret[0].(*clock.Timer)
	return ret0
}

// AfterFunc indicates an expected call of AfterFunc.
func (mr *MockClockMockRecorder) AfterFunc(d, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFunc", reflect.TypeOf((*MockClock)(nil).AfterFunc), d, f)
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// Since mocks base method.
func (m *MockClock) Since(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Since", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since.
func (mr *MockClockMockRecorder) Since(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockClock)(nil).Since), t)
}

// Sleep mocks base method.
func (m *MockClock) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockClockMockRecorder) Sleep(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockClock)(nil).Sleep), d)
}

// Tick mocks base method.
func (m *MockClock) Tick(d time.Duration) <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick", d)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Tick indicates an expected call of Tick.
func (mr *MockClockMockRecorder) Tick(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockClock)(nil).Tick), d)
}

// Ticker mocks base method.
func (m *MockClock) Ticker(d time.Duration) *clock.Ticker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticker", d)
	ret0, _ := ret[0].(*clock.Ticker)
	return ret0
}

// Ticker indicates an expected call of Ticker.
func (mr *MockClockMockRecorder) Ticker(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker", reflect.TypeOf((*MockClock)(nil).Ticker), d)
}

// Timer mocks base method.
func (m *MockClock) Timer(d time.Duration) *clock.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer", d)
	ret0, _ := ret[0].(*clock.Timer)
	return ret0
}

// Timer indicates an expected call of Timer.
func (mr *MockClockMockRecorder) Timer(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockClock)(nil).Timer), d)
}

// Until mocks base method.
func (m *MockClock) Until(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Until", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Until indicates an expected call of Until.
func (mr *MockClockMockRecorder) Until(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Until", reflect.TypeOf((*MockClock)(nil).Until), t)
}

// WithDeadline mocks base method.
func (m *MockClock) WithDeadline(parent context.Context, d time.Time) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDeadline", parent, d)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// WithDeadline indicates an expected call of WithDeadline.
func (mr *MockClockMockRecorder) WithDeadline(parent, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeadline", reflect.TypeOf((*MockClock)(nil).WithDeadline), parent, d)
}

// WithTimeout mocks base method.
func (m *MockClock) WithTimeout(parent context.Context, t time.Duration) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", parent, t)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockClockMockRecorder) WithTimeout(parent, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockClock)(nil).WithTimeout), parent, t)
}
