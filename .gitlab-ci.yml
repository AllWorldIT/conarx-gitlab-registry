image: golang:1.12-buster

variables:
  BUILDTAGS: "include_gcs include_oss"
  CGO_ENABLED: 1
  AWS_ACCESS_KEY: "AKIAIOSFODNN7EXAMPLE"
  AWS_SECRET_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  MINIO_ACCESS_KEY: $AWS_ACCESS_KEY
  MINIO_SECRET_KEY: $AWS_SECRET_KEY
  REGION_ENDPOINT: "http://minio:9000"
  AWS_REGION: "us-east-2"
  S3_BUCKET: "test-bucket"
  S3_ENCRYPT: "false"

stages:
  - test
  - integration

# Hack to emulate github.com/docker/distribution paths for Golang
# Eventually the project files should be renamed to GitLab paths
.inject-gopath: &inject-gopath
  - cd $GOPATH/src
  - mkdir -p github.com/docker
  - cd $GOPATH/src/github.com/docker
  - ln -s $CI_PROJECT_DIR distribution
  - cd distribution
  - GOOS=linux GO111MODULE=off script/setup/install-dev-tools

static-analysis:
  stage: test
  before_script: *inject-gopath
  script:
    - make check
  allow_failure: true

verify:
  stage: test
  before_script: *inject-gopath
  script:
    - go build -i .
    - make build
    - make binaries
    - make coverage

s3:
  stage: integration
  before_script: *inject-gopath
  services:
  - name: minio/minio:latest
    alias: "minio"
    command: ["server", "/data"]
  script:
    # Download the minio client
    - wget --no-verbose https://dl.min.io/client/mc/release/linux-amd64/mc
    - chmod u+x ./mc
    # Configure the minio client to use the local minio service rather than play.minio.io
    - ./mc config host add s3v4 $REGION_ENDPOINT $AWS_ACCESS_KEY $AWS_SECRET_KEY --api S3v4
    - ./mc mb s3v4/$S3_BUCKET
    - go test -timeout 20m -v github.com/docker/distribution/registry/storage/driver/s3-aws
